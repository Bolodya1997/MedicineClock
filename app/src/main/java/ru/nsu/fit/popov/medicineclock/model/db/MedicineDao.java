package ru.nsu.fit.popov.medicineclock.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDICINE".
*/
public class MedicineDao extends AbstractDao<Medicine, Long> {

    public static final String TABLENAME = "MEDICINE";

    /**
     * Properties of entity Medicine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Active = new Property(2, boolean.class, "active", false, "ACTIVE");
        public final static Property StartTime = new Property(3, int.class, "startTime", false, "START_TIME");
        public final static Property Delay = new Property(4, int.class, "delay", false, "DELAY");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
    }


    public MedicineDao(DaoConfig config) {
        super(config);
    }
    
    public MedicineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDICINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 1: name
                "\"ACTIVE\" INTEGER NOT NULL ," + // 2: active
                "\"START_TIME\" INTEGER NOT NULL ," + // 3: startTime
                "\"DELAY\" INTEGER NOT NULL ," + // 4: delay
                "\"COUNT\" INTEGER NOT NULL );"); // 5: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDICINE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Medicine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getActive() ? 1L: 0L);
        stmt.bindLong(4, entity.getStartTime());
        stmt.bindLong(5, entity.getDelay());
        stmt.bindLong(6, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Medicine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getActive() ? 1L: 0L);
        stmt.bindLong(4, entity.getStartTime());
        stmt.bindLong(5, entity.getDelay());
        stmt.bindLong(6, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Medicine readEntity(Cursor cursor, int offset) {
        Medicine entity = new Medicine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // active
            cursor.getInt(offset + 3), // startTime
            cursor.getInt(offset + 4), // delay
            cursor.getInt(offset + 5) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Medicine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setActive(cursor.getShort(offset + 2) != 0);
        entity.setStartTime(cursor.getInt(offset + 3));
        entity.setDelay(cursor.getInt(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Medicine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Medicine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Medicine entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
